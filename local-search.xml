<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RESTful API</title>
    <link href="/2021/05/14/RESTful-API/"/>
    <url>/2021/05/14/RESTful-API/</url>
    
    <content type="html"><![CDATA[<p>什么是 RESTful 架构：</p><ul><li>每一个 URI 代表一种资源；</li><li>客户端和服务器之间，传递这种资源的某种表现层；</li><li>客户端通过四个 HTTP 动词，对服务器端资源进行操作，实现”表现层状态转化”。</li></ul><h2 id="REST是什么"><a href="#REST是什么" class="headerlink" title="REST是什么"></a>REST是什么</h2><ul><li>万维网软件架构<strong>风格</strong></li><li>用来创建网络服务</li></ul><h2 id="为何叫REST"><a href="#为何叫REST" class="headerlink" title="为何叫REST"></a>为何叫REST</h2><div class="note note-success">            <p>Representational State Transfer</p>          </div><ul><li><code>Representational</code>：数据的表现形式（JSON、XML…）</li><li><code>State</code>：当前状态或者数据</li><li><code>Transfer</code>：数据传输</li></ul><h2 id="REST的6个限制"><a href="#REST的6个限制" class="headerlink" title="REST的6个限制"></a>REST的6个限制</h2><h3 id="客户-服务器（Client-Server）"><a href="#客户-服务器（Client-Server）" class="headerlink" title="客户-服务器（Client-Server）"></a>客户-服务器（Client-Server）</h3><ul><li>关注点分离</li><li>服务器专注数据存储，提升了简单性</li><li>前端专注用户界面，提升了可移植性</li></ul><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><ul><li>所有用户回话信息都保存在客户端</li><li>每次请求必须包括所有信息，不能依赖上下文信息</li><li>服务端不用保存会话信息，提升了简单性、可靠性、可见性</li></ul><h3 id="缓存（Cache）"><a href="#缓存（Cache）" class="headerlink" title="缓存（Cache）"></a>缓存（Cache）</h3><ul><li>所有服务端响应都要被标为可缓存或不可缓存</li><li>减少前后端交互，提升了性能</li></ul><h3 id="统一接口（Uniform-Interface）"><a href="#统一接口（Uniform-Interface）" class="headerlink" title="统一接口（Uniform Interface）"></a>统一接口（Uniform Interface）</h3><ul><li>接口设计尽可能统一通用，提升了简单性、可见性</li><li>接口与实现解耦，使前后端可以独立开发迭代</li></ul><h3 id="分层系统（Layered-System）"><a href="#分层系统（Layered-System）" class="headerlink" title="分层系统（Layered System）"></a>分层系统（Layered System）</h3><ul><li>每层只知道相邻的一层，后面隐藏的就不知道了</li><li>客户端不知道是和代理还是真实服务器通信</li><li>其它层：安全层、负载均衡、缓存层等</li></ul><h3 id="按需代码（Code-On-Demand可选）"><a href="#按需代码（Code-On-Demand可选）" class="headerlink" title="按需代码（Code-On-Demand可选）"></a>按需代码（Code-On-Demand可选）</h3><ul><li>客户端可以下载运行服务端传来的代码（比如JS）</li><li>通过减少一些功能，简化了客户端</li></ul><h2 id="统一接口的限制"><a href="#统一接口的限制" class="headerlink" title="统一接口的限制"></a>统一接口的限制</h2><h3 id="资源的标识"><a href="#资源的标识" class="headerlink" title="资源的标识"></a>资源的标识</h3><ul><li>资源是任何可以命名的事务，比如用户、评论等</li><li>每个资源可以通过URI被唯一地识别<ul><li><code>http://api.github.com/users</code></li><li><code>http://api.github.com/users/123</code></li></ul></li></ul><h3 id="通过表述来操作资源"><a href="#通过表述来操作资源" class="headerlink" title="通过表述来操作资源"></a>通过表述来操作资源</h3><ul><li>表述就是<code>Representation</code>，比如JSON、XML等</li><li>客户端不能直接操作（比如SQL）服务器资源</li><li>客户端应该通过表述（比如JSON）来操作资源</li></ul><h3 id="自描述消息"><a href="#自描述消息" class="headerlink" title="自描述消息"></a>自描述消息</h3><ul><li>每个消息（请求或响应）必须提供足够的信息让接受者理解</li><li>媒体类型（application/json、application/xml）</li><li>HTTP方法：GET（查）、POST（增）、DELETE（删）</li><li>是否缓存：Cache-Control</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>RESTful API</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
