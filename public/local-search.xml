<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RESTful API</title>
    <link href="/2021/05/14/RESTful-API/"/>
    <url>/2021/05/14/RESTful-API/</url>
    
    <content type="html"><![CDATA[<h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><h3 id="REST是什么"><a href="#REST是什么" class="headerlink" title="REST是什么"></a>REST是什么</h3><ul><li>万维网软件架构<strong>风格</strong></li><li>用来创建网络服务</li></ul><h3 id="为何叫REST"><a href="#为何叫REST" class="headerlink" title="为何叫REST"></a>为何叫REST</h3><div class="note note-success">            <p>Representational State Transfer</p>          </div><ul><li><code>Representational</code>：数据的表现形式（JSON、XML…）</li><li><code>State</code>：当前状态或者数据</li><li><code>Transfer</code>：数据传输</li></ul><h3 id="REST的6个限制"><a href="#REST的6个限制" class="headerlink" title="REST的6个限制"></a>REST的6个限制</h3><p>客户-服务器（Client-Server）</p><ul><li>关注点分离</li><li>服务器专注数据存储，提升了简单性</li><li>前端专注用户界面，提升了可移植性</li></ul><p>无状态</p><ul><li>所有用户回话信息都保存在客户端</li><li>每次请求必须包括所有信息，不能依赖上下文信息</li><li>服务端不用保存会话信息，提升了简单性、可靠性、可见性</li></ul><p>缓存（Cache）</p><ul><li>所有服务端响应都要被标为可缓存或不可缓存</li><li>减少前后端交互，提升了性能</li></ul><p>统一接口（Uniform Interface）</p><ul><li>接口设计尽可能统一通用，提升了简单性、可见性</li><li>接口与实现解耦，使前后端可以独立开发迭代</li></ul><p>分层系统（Layered System）</p><ul><li>每层只知道相邻的一层，后面隐藏的就不知道了</li><li>客户端不知道是和代理还是真实服务器通信</li><li>其它层：安全层、负载均衡、缓存层等</li></ul><p>按需代码（Code-On-Demand可选）</p><ul><li>客户端可以下载运行服务端传来的代码（比如JS）</li><li>通过减少一些功能，简化了客户端</li></ul><h3 id="统一接口的限制"><a href="#统一接口的限制" class="headerlink" title="统一接口的限制"></a>统一接口的限制</h3><p>资源的标识</p><ul><li>资源是任何可以命名的事务，比如用户、评论等</li><li>每个资源可以通过URI被唯一地识别<ul><li><code>http://api.github.com/users</code></li><li><code>http://api.github.com/users/123</code></li></ul></li></ul><p>通过表述来操作资源</p><ul><li>表述就是<code>Representation</code>，比如JSON、XML等</li><li>客户端不能直接操作（比如SQL）服务器资源</li><li>客户端应该通过表述（比如JSON）来操作资源</li></ul><p>自描述消息</p><ul><li>每个消息（请求或响应）必须提供足够的信息让接受者理解</li><li>媒体类型（application/json、application/xml）</li><li>HTTP方法：GET（查）、POST（增）、DELETE（删）</li><li>是否缓存：Cache-Control</li></ul><p>超媒体作为应用状态引擎</p><ul><li>超媒体：带文字的链接</li><li>应用状态：一个网页</li><li>引擎：驱动、跳转</li><li>合起来：点击链接跳转到另一个网页</li></ul><h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><h3 id="什么是RESTful-API"><a href="#什么是RESTful-API" class="headerlink" title="什么是RESTful API"></a>什么是RESTful API</h3><p>符合<code>REST</code>架构风格的API。</p><h3 id="RESTful-API-构成"><a href="#RESTful-API-构成" class="headerlink" title="RESTful API 构成"></a>RESTful API 构成</h3><ul><li>基本的URI，如<code>https://api.github.com/users</code></li><li>标准的HTTP方法，如GET、POST、PUT、PATCH、DELETE</li><li>传输的数据媒体类型，如JSON、XML</li></ul><p>举例：</p><ul><li>GET /users #获取user列表</li><li>GET /users/12 #查看某个具体的user</li><li>POST /users #新建一个user</li><li>PUT /users/12 #更新user 12</li><li>DELETE /users/12 #删除user 12</li></ul><h3 id="RESTful-API设计最佳实践"><a href="#RESTful-API设计最佳实践" class="headerlink" title="RESTful API设计最佳实践"></a>RESTful API设计最佳实践</h3><h4 id="请求设计规范"><a href="#请求设计规范" class="headerlink" title="请求设计规范"></a>请求设计规范</h4><ul><li>URI使用名词，尽量用复数，如/users</li><li>URI使用嵌套表示关联关系，如/users/12/repos/5</li><li>使用正确的HTTP方法，如GET/POST/PUT/DELETE</li><li>不符合CRUD的情况：POST/action/子资源</li></ul><h4 id="响应设计规范"><a href="#响应设计规范" class="headerlink" title="响应设计规范"></a>响应设计规范</h4><ul><li>查询</li><li>分页</li><li>字段过滤</li><li>状态码</li><li>错误处理</li></ul><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><ul><li>HTTPS</li><li>鉴权</li><li>限流</li></ul><h4 id="开发者友好"><a href="#开发者友好" class="headerlink" title="开发者友好"></a>开发者友好</h4><ul><li>文档</li><li>超媒体</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>RESTful API</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
